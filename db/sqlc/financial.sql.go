// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: financial.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteFinancial = `-- name: DeleteFinancial :one
DELETE FROM financials 
WHERE id = $1
RETURNING id, user_id, amount, direction, type_id, created_at
`

func (q *Queries) DeleteFinancial(ctx context.Context, id int64) (Financial, error) {
	row := q.db.QueryRow(ctx, deleteFinancial, id)
	var i Financial
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Direction,
		&i.TypeID,
		&i.CreatedAt,
	)
	return i, err
}

const getFinancialById = `-- name: GetFinancialById :one
SELECT f.id, f.amount, f.direction, ft.type, f.created_at
FROM financials f
LEFT JOIN financial_types ft ON (f.type_id = ft.id) 
WHERE f.id = $1
`

type GetFinancialByIdRow struct {
	ID        int64              `json:"id"`
	Amount    int64              `json:"amount"`
	Direction string             `json:"direction"`
	Type      pgtype.Text        `json:"type"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetFinancialById(ctx context.Context, id int64) (GetFinancialByIdRow, error) {
	row := q.db.QueryRow(ctx, getFinancialById, id)
	var i GetFinancialByIdRow
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Direction,
		&i.Type,
		&i.CreatedAt,
	)
	return i, err
}

const getFinancialOwner = `-- name: GetFinancialOwner :one
SELECT user_id FROM financials
WHERE id = $1
`

func (q *Queries) GetFinancialOwner(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRow(ctx, getFinancialOwner, id)
	var user_id string
	err := row.Scan(&user_id)
	return user_id, err
}

const insertNewFinancial = `-- name: InsertNewFinancial :one
INSERT INTO financials
    (user_id, amount, direction, type_id)
VALUES 
    ($1, $2, $3, $4)
RETURNING id, user_id, amount, direction, type_id, created_at
`

type InsertNewFinancialParams struct {
	UserID    string `json:"user_id"`
	Amount    int64  `json:"amount"`
	Direction string `json:"direction"`
	TypeID    int64  `json:"type_id"`
}

func (q *Queries) InsertNewFinancial(ctx context.Context, arg InsertNewFinancialParams) (Financial, error) {
	row := q.db.QueryRow(ctx, insertNewFinancial,
		arg.UserID,
		arg.Amount,
		arg.Direction,
		arg.TypeID,
	)
	var i Financial
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Direction,
		&i.TypeID,
		&i.CreatedAt,
	)
	return i, err
}

const myFinancial = `-- name: MyFinancial :many
SELECT f.id, f.amount, f.direction, ft.type, f.created_at
FROM financials f
LEFT JOIN financial_types ft ON (f.type_id = ft.id) 
WHERE f.user_id = $1
`

type MyFinancialRow struct {
	ID        int64              `json:"id"`
	Amount    int64              `json:"amount"`
	Direction string             `json:"direction"`
	Type      pgtype.Text        `json:"type"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) MyFinancial(ctx context.Context, userID string) ([]MyFinancialRow, error) {
	rows, err := q.db.Query(ctx, myFinancial, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MyFinancialRow{}
	for rows.Next() {
		var i MyFinancialRow
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Direction,
			&i.Type,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFinancial = `-- name: UpdateFinancial :one
UPDATE financials
SET amount = $1, direction = $2, type_id = $3
WHERE id = $4
RETURNING id, user_id, amount, direction, type_id, created_at
`

type UpdateFinancialParams struct {
	Amount    int64  `json:"amount"`
	Direction string `json:"direction"`
	TypeID    int64  `json:"type_id"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdateFinancial(ctx context.Context, arg UpdateFinancialParams) (Financial, error) {
	row := q.db.QueryRow(ctx, updateFinancial,
		arg.Amount,
		arg.Direction,
		arg.TypeID,
		arg.ID,
	)
	var i Financial
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Direction,
		&i.TypeID,
		&i.CreatedAt,
	)
	return i, err
}
