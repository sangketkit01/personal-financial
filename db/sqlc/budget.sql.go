// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: budget.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addNewBudget = `-- name: AddNewBudget :one
INSERT INTO budgets
    (user_id, month, year, amount)
VALUES
    ($1, $2, $3, $4)
RETURNING id, user_id, month, year, amount, created_at, updated_at
`

type AddNewBudgetParams struct {
	UserID string         `json:"user_id"`
	Month  int32          `json:"month"`
	Year   int32          `json:"year"`
	Amount pgtype.Numeric `json:"amount"`
}

func (q *Queries) AddNewBudget(ctx context.Context, arg AddNewBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, addNewBudget,
		arg.UserID,
		arg.Month,
		arg.Year,
		arg.Amount,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Month,
		&i.Year,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBudget = `-- name: GetBudget :one
SELECT id, user_id, month, year, amount, created_at, updated_at FROM budgets
WHERE month = $1 AND year = $2 
AND user_id = $3
`

type GetBudgetParams struct {
	Month  int32  `json:"month"`
	Year   int32  `json:"year"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetBudget(ctx context.Context, arg GetBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, getBudget, arg.Month, arg.Year, arg.UserID)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Month,
		&i.Year,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBudgetHistory = `-- name: GetBudgetHistory :many
SELECT id, user_id, month, year, amount, created_at, updated_at FROM budgets
WHERE user_id = $1
LIMIT 12
`

func (q *Queries) GetBudgetHistory(ctx context.Context, userID string) ([]Budget, error) {
	rows, err := q.db.Query(ctx, getBudgetHistory, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Budget{}
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Month,
			&i.Year,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBudgetHistoryByYear = `-- name: GetBudgetHistoryByYear :one
SELECT id, user_id, month, year, amount, created_at, updated_at FROM budgets
WHERE user_id = $1 AND year = $2
LIMIT 12
`

type GetBudgetHistoryByYearParams struct {
	UserID string `json:"user_id"`
	Year   int32  `json:"year"`
}

func (q *Queries) GetBudgetHistoryByYear(ctx context.Context, arg GetBudgetHistoryByYearParams) (Budget, error) {
	row := q.db.QueryRow(ctx, getBudgetHistoryByYear, arg.UserID, arg.Year)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Month,
		&i.Year,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBudget = `-- name: UpdateBudget :one
UPDATE budgets
SET amount = $1
WHERE id = $2
RETURNING id, user_id, month, year, amount, created_at, updated_at
`

type UpdateBudgetParams struct {
	Amount pgtype.Numeric `json:"amount"`
	ID     int32          `json:"id"`
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) (Budget, error) {
	row := q.db.QueryRow(ctx, updateBudget, arg.Amount, arg.ID)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Month,
		&i.Year,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
